fs            = require 'fs'
{print}       = require 'util'
{spawn, exec} = require 'child_process'


compile = (watch, callback) ->
  if typeof watch is 'function'
    callback = watch
    watch = false
  options = ['-c', '-o', 'lib', 'src']
  options.unshift '-w' if watch

  coffee = spawn 'coffee', options
  coffee.stdout.on 'data', (data) -> print data.toString()
  coffee.stderr.on 'data', (data) -> print data.toString()
  coffee.on 'exit', (status) -> callback?() if status is 0

run = (command, callback) ->
  cmd = exec command
  cmd.stdout.on 'data', (data) -> print data
  cmd.stderr.on 'data', (data) -> print data
  cmd.on 'exit', (status) -> callback?() if status is 0
  

task 'docs', 'Generate annotated source code with Docco', ->
  fs.readdir 'src', (err, contents) ->
    files = ("src/#{file}" for file in contents when /\.coffee$/.test file)
    docco = spawn 'docco', files
    docco.stdout.on 'data', (data) -> print data.toString()
    docco.stderr.on 'data', (data) -> print data.toString()
    docco.on 'exit', (status) -> callback?() if status is 0

task 'compile', 'Compile CoffeeScript source files', ->
  compile()

task 'smoosh', "Smoosh all the compiled CoffeeScripts", ->
  run 'smoosh ./smoosh.json'

task 'build', 'Build /lib from /src, then smoosh /src', ->
  cb = -> run 'smoosh ./smoosh.json' 
  compile cb

task 'watch', "Recompile CoffeeScript source files when modified", ->
  compile true

task 'test', "Run tests", ->
  run 'jasmine-node --color --coffee ./spec'

task 'test:verbose', "Run tests", ->
  run 'jasmine-node --color --verbose --coffee ./spec'